node {

    stage('Initialize') {
        cleanWs()

        def gitUrl = scm.getUserRemoteConfigs()[0].getUrl()
        def credentialsId = scm.getUserRemoteConfigs()[0].getCredentialsId()

        parameters {
            gitParameter name: 'TAG', type: 'PT_TAG', defaultValue: 'origin/master'
            gitParameter branchFilter: 'origin/master', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
        }

        checkout([$class                           : 'GitSCM',
                  branches                         : [[name: "${params.TAG}"]],
                  doGenerateSubmoduleConfigurations: false,
                  extensions                       : [],
                  gitTool                          : 'Default',
                  submoduleCfg                     : [],
                  userRemoteConfigs                : [[credentialsId: credentialsId, branch: "${params.BRANCH}", url: gitUrl]]
        ])

        env.ecr = "393305049144.dkr.ecr.eu-central-1.amazonaws.com/digitoll-services-erp-ct"

        def matcher = readFile('pom.xml') =~ '<version>(.+?)</version>'
        env.version = matcher ? matcher[0][1] : null
    }

    stage ("Run tests") {
        sh 'mvn clean test -am -pl erp'
    }

    stage('Build') {
        def applicationProperties = "erp/src/main/resources/application.properties"
        def gitLatestCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

        sh "cp $applicationProperties.$ENV $applicationProperties"
        sh 'cp erp/src/main/resources/bootstrap.yml.$ENV erp/src/main/resources/bootstrap.yml'
        sh "sed -i 's/erp-$ENV/erp-ct-$ENV/' erp/src/main/resources/bootstrap.yml"
        sh 'cp erp/Dockerfile.$ENV erp/Dockerfile'

        sh """echo -e "\\ninfo.build.number=$BUILD_NUMBER" >> $applicationProperties"""
        sh """echo "info.application.version=${version}" >> $applicationProperties"""
        sh """echo "info.git.commit=$gitLatestCommit" >> $applicationProperties"""
        sh """echo "digitoll.erp.disableEmail=true" >> $applicationProperties"""

        sh "mvn clean package -Dmaven.test.skip=true"
    }

    stage('Build image') {
        sh "docker build -t $ecr:${version}.$BUILD_NUMBER -t $ecr:$ENV erp"
    }

//for tests Jenkins
    //stage('Push to ECR') {
    //    sh '$(aws ecr get-login --no-include-email)'
    //    sh "docker push $ecr:${version}.$BUILD_NUMBER"
    //    sh "docker push $ecr:$ENV"
    //}

    stage('Docker clean') {
        sh 'docker images $ecr -q | uniq | xargs -r docker rmi -f'
    }

    //stage('Deploy to ECS') {
    //    sh 'aws ecs update-service --force-new-deployment --cluster $ENV --service digitoll-services-erp-ct-$ENV'
    //}
}